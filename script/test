#!/bin/bash
#
#  Copyright (c) 2017, The OpenThread Authors.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#
#   Description:
#       This script runs border router tests.
#

. "$(dirname "$0")"/_initrc
set -o pipefail

readonly COLOR_PASS='\033[0;32m'
readonly COLOR_FAIL='\033[0;31m'
readonly COLOR_NONE='\033[0m'

readonly BUILD_JOBS=$(getconf _NPROCESSORS_ONLN)
readonly CONFIGURE_PATH="$(pwd)/configure"
readonly TOP_BUILDDIR="${BUILD_DIR}/otbr"

#######################################
# Run test and print result.
# Globals:
#   COLOR_PASS
#   COLOR_FAIL
#   COLOR_NONE
# Arguments:
#   $@  - Test command
# Returns:
#   0           - Test passed.
#   Otherwise   - Test failed!
#######################################
print_result() {
    local exit_code=0

    if "$@" &> test.log; then
        exit_code=$?
        prefix="${COLOR_PASS}PASS${COLOR_NONE}"
    else
        exit_code=$?
        prefix="${COLOR_FAIL}FAIL${COLOR_NONE}"
    fi

    echo -e "${prefix}" $*

    # only output log on failure
    if [[ "${exit_code}" != 0 ]]; then
        cat test.log
    fi

    return ${exit_code}
}

print_usage() {
    cat <<EOF
USAGE: $0 COMMAND

COMMAND:
    build       Build project for running tests. This can be used to rebuild the project for changes.
    clean       Clean built files to prepare new build.
    distcheck   Run autoconf distcheck.
    meshcop     Run MeshCoP tests.
    help        Print this help.

EXAMPLES:
    $0 clean build
EOF
    exit $1
}

do_build() {
    mkdir -p "${TOP_BUILDDIR}"
    (
        set -e

        cd "${TOP_BUILDDIR}"

        ${CONFIGURE_PATH} \
            --disable-docs \
            --exec-prefix=/usr \
            --prefix= \
            ${configure_options}

        make -j${BUILD_JOBS}
    )
}

do_clean() {
    rm -rf "${TOP_BUILDDIR}" || true
}

do_check() {
    (
        set -e

        cd "${TOP_BUILDDIR}"

        make check
    )
}

do_distcheck() {
    mkdir -p "${TOP_BUILDDIR}"
    (
        set -e

        cd "${TOP_BUILDDIR}"

        ${CONFIGURE_PATH}

        distcleancheck_listfiles="find . -type f \\( -name '*.gcda' -o -name '*.gcno' \\) -exec mv '{}' '$(pwd)/{}' \\;;find . -type f"
        make distcheck DISTCHECK_CONFIGURE_FLAGS="${configure_options}" distcleancheck_listfiles="${distcleancheck_listfiles}"
    )
}

do_prepare() {
    if [[ "${WITH_MDNS}" = 'mDNSResponder' ]]; then
        sudo service avahi-daemon stop
        sudo mdnsd
    fi

    if [[ -n "${WITH_MDNS}" ]]; then
        configure_options="${configure_options} --with-mdns=${WITH_MDNS}"
    fi

    if [[ -n "${WITH_NCP}" ]]; then
        configure_options="${configure_options} --with-ncp=${WITH_NCP}"
    fi

    if [[ "${COVERAGE}" = 1 ]]; then
        configure_options="${configure_options} --enable-debug --enable-coverage"
    fi

    if [[ "${DEBUG}" = 1 ]]; then
        configure_options="${configure_options} --enable-debug"
    fi
}

main() {
    if [[ -z "$1" ]]; then
        print_usage 1
    fi

    do_prepare

    while [[ -n "$1" ]]; do
        case "$1" in
            build)
                do_build
                ;;
            check)
                print_result do_check
                ;;
            clean)
                do_clean
                ;;
            distcheck)
                print_result do_distcheck
                ;;
            help)
                print_usage
                ;;
            meshcop)
                top_builddir="${TOP_BUILDDIR}" print_result ./tests/scripts/meshcop
                ;;
            *)
                echo "Unknown test: ${1}"
                print_usage 1
                ;;
        esac
        shift
    done
}

main "$@"
