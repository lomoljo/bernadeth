<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
 "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node>
  <interface name="io.openthread.BorderRouter">
    <method name="Scan">
      <!--
        struct {
          uint64 ext_address
          string network_name
          uint64 ext_panid
          uint8[] steering_data
          uint16 panid
          uint16 joiner_udp_port
          uint16 channel
          uint16 rssi
          uint8 lqi
          uint8 version
          bool is_native
          bool is_joinable
        }
      -->
      <arg name="scan_result" type="a(tstayqqqqyybb)" direction="out"/> 
    </method>

    <method name="Attach">
      <arg name="masterkey" type="ay"/>
      <arg name="panid" type="q"/>
      <arg name="networkname" type="s"/>
      <arg name="extpanid" type="t"/>
      <arg name="pskc" type="ay"/>
      <arg name="channel_mask" type="u"/>
    </method>

    <method name="OpenUnsecurePort">
      <arg name="port" type="q"/>
      <arg name="timeout" type="u"/>
    </method>

    <method name="JoinerStart">
      <arg name="pskd" type="s"/>
      <arg name="provision_url" type="s"/>
      <arg name="vendor_name" type="s"/>
      <arg name="vendor_model" type="s"/>
      <arg name="vendor_sw_version" type="s"/>
      <arg name="vendor_data" type="s"/>
    </method>

    <method name="JoinerStop">
    </method>

    <method name="FactoryReset">
    </method>

    <method name="Reset">
    </method>

    <!--
      struct {
        struct {
          uint8[] prefix_bytes
          uint8 prefix_length
        }
        byte preference
        struct {
          boolean preferred
          boolean slaac 
          boolean dhcp 
          boolean configure 
          boolean default_route   
          boolean on_mesh
          boolean stable 
        }
      }
    -->
    <method name="AddOnMeshPrefix">
      <arg name="prefix" type="((ayy)y(bbbbbbb))"/>
    </method>
    
    <!--
      struct {
        uint8[] prefix_bytes
        uint8 prefix_length
      }
    -->
    <method name="RemoveOnMeshPrefix">
      <arg name="prefix" type="(ayy)"/>
    </method>

    <property name="MeshLocalPrefix" type="ay" access="readwrite">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
    </property>

    <property name="LegacyULAPrefix" type="ay" access="readwrite">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
    </property>

    <!--
      struct {
        bool rx_on_when_idle
        bool secure_data_requests
        bool device_type (ftd or mtd)
        bool network_data (full or stable)
      }
    -->
    <property name="LinkMode" type="(bbbb)" access="readwrite">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
    </property>

    <property name="DeviceRole" type="s" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
    </property>

    <property name="NetworkName" type="s" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
    </property>

    <property name="PanId" type="q" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
    </property>

    <property name="ExtPanId" type="t" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
    </property>

    <property name="Channel" type="q" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
    </property>

    <property name="CcaFailureRate" type="q" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
    </property>

    <!--
      struct {
        uint32 tx_total;
        uint32 tx_unicast;
        uint32 tx_broadcast;
        uint32 tx_ack_requested;
        uint32 tx_acked;
        uint32 tx_no_ack_requested;
        uint32 tx_data;
        uint32 tx_data_poll;
        uint32 tx_beacon;
        uint32 tx_beacon_request;
        uint32 tx_other;
        uint32 tx_retry;
        uint32 tx_err_cca;
        uint32 tx_err_abort;
        uint32 tx_busy_channel;
        uint32 rx_total;
        uint32 rx_unicast;
        uint32 rx_broadcast;
        uint32 rx_data;
        uint32 rx_data_poll;
        uint32 rx_beacon;
        uint32 rx_beacon_request;
        uint32 rx_other;
        uint32 rx_address_filtered;
        uint32 rx_dest_address_filtered;
        uint32 rx_duplicated;
        uint32 rx_err_no_frame;
        uint32 rx_err_unknown_neighbor;
        uint32 rx_err_invalid_src_addr;
        uint32 rx_err_sec;
        uint32 rx_err_fcs;
        uint32 rx_err_other;
      }
    -->
    <property name="MacCounters" type="(uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu)" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
    </property>

    <!--
      struct {
        uint32 ip_tx_success;
        uint32 ip_rx_success;
        uint32 ip_tx_failure;
        uint32 ip_rx_failure;
      }
    -->
    <property name="LinkCounters" type="(uuuu)" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
    </property>

    <property name="SupportedChannelMask" type="u" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
    </property>
  </interface>

  <interface name="org.freedesktop.DBus.Properties">
    <method name="Get">
      <arg name="interface" direction="in" type="s"/>
      <arg name="property" direction="in" type="s"/>
      <arg name="value" direction="out" type="v"/>
    </method>

    <method name="GetAll">
      <arg name="interface" direction="in" type="s"/>
      <arg name="properties" direction="out" type="a{sv}"/>
    </method>

    <method name="Set">
      <arg name="interface" direction="in" type="s"/>
      <arg name="property" direction="in" type="s"/>
      <arg name="value" direction="in" type="v"/>
    </method>

    <signal name="PropertiesChanged">
      <arg type="s" name="interface"/>
      <arg type="a{sv}" name="changed_properties"/>
      <arg type="as" name="invalidated_properties"/>
    </signal>
  </interface>
</node>
